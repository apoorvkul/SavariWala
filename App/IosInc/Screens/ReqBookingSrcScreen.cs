// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SavariWala.Common;
using SavariWala;

namespace Savariwala.Ios
{
	public partial class ReqBookingSrcScreen : MapPointsControllerBase
	{
		private bool _sensor;

		public ReqBookingSrcScreen (IntPtr handle) : base (handle, AppCommon.Inst.GetSrc())
		{
			Init (BtnLeft, BtnRight, BtnSelStart, MapContainer);
			_sensor = AppCommon.Inst.StartPoint == null;
			AppCommon.Inst.StartPoint = null;			
			if (!_sensor) {
				_wRoutesMapperImpl.FetchNearestPoints (_sensor);
			}
		}

		void OnPointDirectionsAdded (object sender, DirAddedEvtArg e)
		{
			if (e.Version == _pointsVer)
				_wRoutesMapperImpl.AddDirection (e.PointDir);
		}

		void OnPointsReset (object sender, PointsResetEvtArg e)
		{
			_pointsVer = e.Version;
			_wRoutesMapperImpl.ResetPoints(e.PointDirections);
		}

		public override void LoadView ()
		{
			if (_sensor) {
				AppCommon.Inst.NearestPointProvider.DirectionAdded += OnPointDirectionsAdded;
				AppCommon.Inst.NearestPointProvider.PointsReset += OnPointsReset;
				_pointsVer = AppCommon.Inst.NearestPointProvider.Version; 
				_wRoutesMapperImpl.ResetPoints (AppCommon.Inst.NearestPointProvider.PointDirections);

				base.LoadView ();
				//var searchBtn = FindViewById<Button> (Resource.Id.seachBtn);
				//searchBtn.Click += (s, e) => this.StartNextActivity<SearchStartActivity> ();
			}
			else base.LoadView ();
		}

		protected override void OnPointSelected(MapPoint place)
		{
			AppCommon.Inst.CurrentReq = new Request { Src = place };
			NavigationController.PushViewController(
				AppDelegate.Inst.StoryBoard.InstantiateViewController("ReqDetailsScreen") as ReqDetailsScreen, true);
		}

		protected override void Dispose (bool disposing)
		{
			AppCommon.Inst.NearestPointProvider.DirectionAdded -= OnPointDirectionsAdded;
			AppCommon.Inst.NearestPointProvider.PointsReset -= OnPointsReset;
			base.Dispose (disposing);
		}
	}
}
